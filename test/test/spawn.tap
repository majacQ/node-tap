TAP version 13
    # Subtest: ___/.*/~~~spawn.js child
        # Subtest: nesting
        1..2
            # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first ___/# time=[0-9.]+(ms)?/~~~

            # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            not ok 3 - nested failure
              ---
              {"at":{"column":10,"file":"test/test/spawn.js","function":"foo","line":22},"compare":"===","found":1,"source":"tt.equal(1, '1', 'nested failure')\n","wanted":"1"}
              ...
            1..3
            # failed 1 of 3 tests
        not ok 2 - second ___/# time=[0-9.]+(ms)?/~~~
          ---
          {"at":{"column":5,"file":"test/test/spawn.js","line":18},"results":{"count":3,"fail":1,"ok":false,"pass":2,"plan":{"end":3,"start":1}},"source":"t.test('second', function (tt) {\n"}
          ...
        # failed 1 of 2 tests
    not ok 1 - nesting ___/# time=[0-9.]+(ms)?/~~~
      ---
      {"at":{"column":3,"file":"test/test/spawn.js","line":11},"results":{"count":2,"fail":1,"ok":false,"pass":1,"plan":{"end":2,"start":1}},"source":"t.test('nesting', function (t) {\n"}
      ...

    ok 2 - this passes
    not ok 3 - this fails
      ---
      {"at":{"column":3,"file":"test/test/spawn.js","line":36},"source":"t.fail('this fails')\n"}
      ...
        # Subtest: async kid
        1..2
        ok 1 - second timeout
        not ok 2 - first timeout
          ---
          {"at":{"column":7,"file":"test/test/spawn.js","line":41,"method":"_onTimeout"},"foo":"blz","source":"t.ok(false, 'first timeout', { foo: 'blz' })\n"}
          ...
        # failed 1 of 2 tests
    not ok 4 - async kid ___/# time=[0-9.]+(ms)?/~~~
      ---
      {"at":{"column":3,"file":"test/test/spawn.js","line":38},"results":{"count":2,"fail":1,"ok":false,"pass":1,"plan":{"end":2,"start":1}},"source":"t.test('async kid', function (t) {\n"}
      ...

    ok 5 - pass after async kid
    1..5
    # failed 3 of 5 tests
    ___/# time=[0-9.]+(ms)?/~~~
not ok 1 - ___/.*/~~~spawn.js child ___/# time=[0-9.]+(ms)?/~~~
  ---
  {"arguments":["___/.*/~~~spawn.js","child"],"at":{"column":5,"file":"test/test/spawn.js","line":8},"command":"___/.*(node|iojs)(.exe)?/~~~","results":{"count":5,"fail":3,"ok":false,"pass":2,"plan":{"end":5,"start":1}},"source":"t.spawn(process.execPath, [__filename, 'child'])\n"}
  ...

    # Subtest: nesting
    1..2
        # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first ___/# time=[0-9.]+(ms)?/~~~

        # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        not ok 3 - nested failure
          ---
          {"at":{"column":10,"file":"test/test/spawn.js","function":"foo","line":22},"compare":"===","found":1,"source":"tt.equal(1, '1', 'nested failure')\n","wanted":"1"}
          ...
        1..3
        # failed 1 of 3 tests
    not ok 2 - second ___/# time=[0-9.]+(ms)?/~~~
      ---
      {"at":{"column":5,"file":"test/test/spawn.js","line":18},"results":{"count":3,"fail":1,"ok":false,"pass":2,"plan":{"end":3,"start":1}},"source":"t.test('second', function (tt) {\n"}
      ...
    # failed 1 of 2 tests
not ok 2 - nesting ___/# time=[0-9.]+(ms)?/~~~
  ---
  {"at":{"column":3,"file":"test/test/spawn.js","line":11},"results":{"count":2,"fail":1,"ok":false,"pass":1,"plan":{"end":2,"start":1}},"source":"t.test('nesting', function (t) {\n"}
  ...

ok 3 - this passes
not ok 4 - this fails
  ---
  {"at":{"column":3,"file":"test/test/spawn.js","line":36},"source":"t.fail('this fails')\n"}
  ...
    # Subtest: async kid
    1..2
    ok 1 - second timeout
    not ok 2 - first timeout
      ---
      {"at":{"column":7,"file":"test/test/spawn.js","line":41,"method":"_onTimeout"},"foo":"blz","source":"t.ok(false, 'first timeout', { foo: 'blz' })\n"}
      ...
    # failed 1 of 2 tests
not ok 5 - async kid ___/# time=[0-9.]+(ms)?/~~~
  ---
  {"at":{"column":3,"file":"test/test/spawn.js","line":38},"results":{"count":2,"fail":1,"ok":false,"pass":1,"plan":{"end":2,"start":1}},"source":"t.test('async kid', function (t) {\n"}
  ...

ok 6 - pass after async kid
1..6
# failed 4 of 6 tests
___/# time=[0-9.]+(ms)?/~~~

